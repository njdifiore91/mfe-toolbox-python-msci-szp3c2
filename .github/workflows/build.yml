name: Build and Test

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12']
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools build
        
    - name: Install backend dependencies
      run: |
        python -m pip install numpy>=1.26.3 scipy>=1.11.4 pandas>=2.1.4 statsmodels>=0.14.1 numba>=0.59.0
        python -m pip install pytest pytest-cov pytest-asyncio hypothesis
        
    - name: Install UI dependencies
      run: |
        python -m pip install PyQt6>=6.6.1
        python -m pip install pytest-qt
        
    - name: Install package in development mode
      run: |
        pip install -e .
        
    - name: Run backend tests
      run: |
        pytest tests/test_core/ tests/test_models/ tests/test_utils/ --cov=mfe --cov-report=xml
        
    - name: Run UI tests
      run: |
        pytest tests/test_ui/ --cov=mfe.ui --cov-report=xml:ui-coverage.xml
        
    - name: Verify Numba JIT compilation
      run: |
        python -c "
        import numpy as np
        from numba import jit
        
        @jit(nopython=True)
        def test_function(x):
            result = 0.0
            for i in range(x.shape[0]):
                for j in range(x.shape[1]):
                    result += x[i, j]
            return result
            
        # Create test data
        data = np.random.rand(1000, 1000)
        
        # First call (compilation happens here)
        result1 = test_function(data)
        
        # Second call (should use compiled version)
        result2 = test_function(data)
        
        # Verify results match numpy's sum
        numpy_result = np.sum(data)
        print(f'Numba result: {result2}')
        print(f'NumPy result: {numpy_result}')
        print(f'Difference: {abs(result2 - numpy_result)}')
        assert abs(result2 - numpy_result) < 1e-10, 'Numba calculation incorrect'
        
        print('Numba JIT compilation successful on platform: ${{ matrix.os }}')
        "
        
    - name: Verify scientific computing integration
      run: |
        python -c "
        import numpy as np
        import scipy as sp
        import pandas as pd
        import statsmodels.api as sm
        import numba
        
        print(f'NumPy version: {np.__version__}')
        print(f'SciPy version: {sp.__version__}')
        print(f'Pandas version: {pd.__version__}')
        print(f'Statsmodels version: {sm.__version__}')
        print(f'Numba version: {numba.__version__}')
        
        # Simple integration test
        data = np.random.randn(100, 5)
        df = pd.DataFrame(data)
        model = sm.OLS(df[0], sm.add_constant(df.iloc[:, 1:]))
        results = model.fit()
        print('Scientific computing integration successful!')
        "
        
    - name: Build packages
      run: |
        python -m build
        
    - name: Upload test coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.os }}-py${{ matrix.python-version }}
        path: "**/*coverage.xml"
        
    - name: Upload packages
      uses: actions/upload-artifact@v3
      with:
        name: packages-${{ matrix.os }}-py${{ matrix.python-version }}
        path: dist/*